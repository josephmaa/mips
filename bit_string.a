.data

newline: .asciiz "\n"
prompt: .asciiz "Please input a bit string value: "
printed: .asciiz "The values in the bit strings are: "
unioned: .asciiz "The unioned bit strings are: "
intersectioned: .asciiz "The intersectioned bit strings are: "
differenced: .asciiz "The differenced bit strings (ordered by input) are: "

bitStringOneAscii: .space 32
bitStringTwoAscii: .space 32
bitStringOne: .space 32
bitStringTwo: .space 32

.text
.globl main

main:
# Asks for two bitStrings and stores them in s0 and s1 respectively. Then prints the two.

la $a0, prompt
li $v0, 4
syscall

la $a0, bitStringOneAscii

li $a1, 32
li $v0, 8
syscall

la $a0, bitStringOneAscii
jal bitString

la $t0, bitStringOne
sw $v0, ($t0)

la $a0, prompt
li $v0, 4
syscall

la $a0, bitStringTwoAscii
li $a1, 32
li $v0, 8
syscall

la $a0, bitStringTwoAscii
jal bitString

la $t0, bitStringTwo
sw $v0, ($t0)

lw $a0, bitStringOne
jal print

lw $a0, bitStringTwo
jal print

la $a0, unioned
li $v0, 4
syscall

la $a0, bitStringOne
la $a1, bitStringTwo
jal union

move $a0, $v0
jal print

la $a0, intersectioned
li $v0, 4
syscall

la $a0, bitStringOne
la $a1, bitStringTwo
jal intersection

move $a0, $v0
jal print

la $a0, differenced
li $v0, 4
syscall

la $a0, bitStringOne
la $a1, bitStringTwo
jal difference

move $a0, $v0
jal print

li $v0, 10
syscall

end_main:

################################################################################
bitString:
# Parameters:
# a0: pointer to the .asciiz string
#
# Intermediate values:
# s0: pointer to current character evaluated
# t0: 32 bit boolean array corresponding to the bitString
# t1: current character evaluated
# t2: number of left shifts
# t3: boolean checking for alphabetic character
# t4: temporary mask
#
# Return values:
# v0: word containing set of letters as a bitString

# Save 1 value on the stack.
addi $sp, $sp, -8 # setup call-frame
sw $ra, ($sp) # save the return addr to get back to main
sw $s0, 4($sp) # save main's s-registers if it is

# Generate word by looping through .asciiz string.
li $t0, 0
la $s0, ($a0)

loop:

lbu $t1, ($s0)

# Check for the null terminated character to end loop.
li $t2, 10
beq $t1, $t2, end_loop

# Use a trick involving setting the bit corresponding to 32 with an or to force the value into a lowercase letter to standardize values, then check if the indexed value is within the range for characters. https://stackoverflow.com/questions/40000211/testing-if-a-value-is-within-one-of-two-ranges
# Set lower-case bit.
ori $t2, $t1, 0x20

# Subtract the index within the alphabet.
addiu $t2, $t2, -97

# create a boolean checking idx <= 'z' - 'a'.
sltiu $t3, $t2, 26

beq $t3, $0, continue

# Create the mask 
li $t4, 1

# Calculate the number of shifts left.
sllv $t4, $t4, $t2

# OR the mask against the actual bit string result.
or $t0, $t0, $t4

# Increment address in loop.
addi $s0, $s0, 1

j loop

continue:

# Increment address in loop.
addi $s0, $s0, 1

j loop

end_loop:

move $v0, $t0

# Move values back into their registers.
lw $ra, ($sp) 
lw $s0, 4($sp) 
addi $sp, $sp, 8

jr $ra

union:
# Parameters:
# a0: pointer to the first bitString
# a1: pointer to the second bitString
#
# Return value:
# v0: a new bitString representing the set union of the two bitStrings

lw $t0, ($a0)
lw $t1, ($a1)
and $t2, $t0, $t1
move $v0, $t2

jr $ra


intersection:
# Parameters:
# a0: pointer to the first bitString
# a1: pointer to the second bitString
#
# Return value:
# v0: a new bitString representing the set intersection of the two bitStrings

lw $t0, ($a0)
lw $t1, ($a1)
or $t2, $t0, $t1
move $v0, $t2

jr $ra


difference:
# Parameters:
# a0: pointer to the first bitString
# a1: pointer to the second bitString
#
# Intermediate values:
# t0: value of first bitString
# t1: value of second bitString
# t2: intermediate return value of function
# t3: counter through loop for both bitStrings
# t4: mask for current value
# t5: boolean for first bitString value
# t6: boolean for second bitString value
# t7: range counter value for end
#
# Return value:
# v0: a new bitString representing the set difference of the first set minus the second set

lw $t0, ($a0)
lw $t1, ($a1)
li $t2, 0
li $t3, 0
li $t7, 26

for_loop_diff:
beq $t3, $t7, end_for_loop_diff

# Generate the mask
li $t4, 1
sllv $t4, $t4, $t3

# Calculate the boolean for the first bitString value.
and $t5, $t0, $t4

# Calculate the boolean for the second bitString value.
add $t6, $a1, $t3
lbu $t6, ($t6)
and $t6, $t1, $t4

# Calculate the and condition where the element is in the first bitString, but not the second bitString to be added to final result.
if_difference:
beq $t5, 0, end_if_difference
bne $t6, 0 end_if_difference
or $t2, $t2, $t4

end_if_difference:

# Increment the counter
addi $t3, $t3, 1
j for_loop_diff

end_for_loop_diff:

move $v0, $t2

jr $ra

contains:
# Parameters:
# a0: .ascii character 
# a1: pointer to a bitString
#
# Return value:
# v0: a boolean that describes whether a value is in the bitString (0 for false, 1 for true)

print:
# Prints a bitString as an ordered, uppercase, bracketed set. (e.g. {E, G, T, Y})
# Parameters:
# a0: bitString value
#
# Temporary registers:
# s0: bitString value
# t0: counter of current index
# t1: loop range comparison value
# t2: mask for comparing values
# t3: flag to print a comma
# t4: ascii value to print
# t5: bool if current char should be printed
#
# Return value:
# None

# Save 1 value on the stack.
addi $sp, $sp, -8 # setup call-frame
sw $ra, ($sp) # save the return addr to get back to main
sw $s0, 4($sp) # save main's s-registers if it is

move $s0, $a0

# Print open bracket.
li $v0, 11
li $a0, '{'
syscall

# The loop should iterate 26 times.
li $t0, 0
li $t1, 26

# Set comma flag to 0
li $t3, 0

# Need to loop through the 26 elements of the bitString.
for_loop:

# Check if the current value is outside the index
beq $t0, $t1, end_for

# Check if the current value should be printed and set the comma flag for the next iteration.

li $t2, 1
sllv $t2, $t2, $t0
and $t2, $t2, $s0
sne $t5, $t2, 0

if_char:
beq $t5, $0, end_if_char

# If the comma flag is set, print a comma, then set the flag back to 0
if_comma:
bne $t3, 1, end_if_comma
li $v0, 11
li $a0, ','
syscall

# Set comma flag to 0.
li $t3, 0

end_if_comma:

addi $t4, $t0, 65

# Print the current value.
li $v0, 11
move $a0, $t4
syscall

# Set the comma flag if there is a char.
li $t3, 1

end_if_char:

# Increment the loop counter
addi $t0, $t0, 1
j for_loop

end_for:

# Print close bracket.
li $v0, 11
li $a0, '}'
syscall

# Print a newline.
li $v0 11  # syscall 11: print a character based on its ASCII value
lw $a0 newline  # ASCII value of a newline is "10"
syscall

# Move values back into their registers.
lw $ra, ($sp) 
lw $s0, 4($sp) 
addi $sp, $sp, 8

jr $ra


