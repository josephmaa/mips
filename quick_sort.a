.data

numbers: .word 8 2 7 10 5 6 3 4 9 3 1
length:  .word 11

.text
.globl main

main:

la $a0, numbers # Start main
li $a1, 0
lw $a2, length
addi $a2, $a2, -1
jal quickSort

li $v0, 10
syscall

quickSort:
# Use quick sort on numbers array.
#
# Input:
# a0: Start address of array with n integers
# a1: Integer low
# a2: Integer high
#
# Intermediate values:
#
# s0-s2: Argument parameters
# s3: pivotPosition
#
# Output:
# Sorts array in-place.

# We have to store 5 values on the stack (including the return address).
addi $sp, $sp, -20 # Start quickSort
sw $ra, ($sp)
sw $s0, 4($sp)
sw $s1, 8($sp)
sw $s2, 12($sp)
sw $s3, 16($sp)

move $s0, $a0
move $s1, $a1
move $s2, $a2

if:
bge $a1, $a2, end_if

move $a0, $s0
move $a1, $s1
move $a2, $s2
jal partition # pivotPosition is placed into register $v0

move $a0, $s0
move $a1, $s1
move $s3, $v0 
addi $v0, $v0, -1
move $a2, $v0
jal quickSort

move $a0, $s0
move $a1, $s3
addi $a1, $a1, 1
move $a2, $s2
jal quickSort

end_if:

# Restore values back (including the return address).
lw $ra, ($sp)
lw $s0, 4($sp)
lw $s1, 8($sp)
lw $s2, 12($sp)
lw $s3, 16($sp)
addi $sp, $sp, 20

jr $ra

swap:
# Swap should exchange the memory value at the two addresses passed it. Swap does not call any subprograms.
#
# Input:
# a0: address of integer operand 1.
# a1: address of integer operand 2.
#
# Intermediate values:
#
# t0: temp address value of integer operand 1
# t1: value of integer operand 1
# t2: value of integer operand 2
#
# Output:
# Swaps the memory values in-place.

move $t0, $a0 # Start swap
lw $t1, ($a0)
lw $t2, ($a1)

sw $t2, ($a0)
sw $t1, ($a1)

jr $ra

partition:
# Partition should split the array based on the pivot value arbitrarily selected as the low element in the array. 
#
# Input:
# a0: start address of array with n integers.
# a1: integer low.
# a2: integer high.
#
# Intermediate values:
# s0-2: saved parameter values
# s3: left index
# s4: right index
# s5: left value
# s6: right value
# s7: pivot value
# t0: intermediate if condition value
# t1: intermediate if condition value
# t2: intermediate left address
# t3: intermediate right address
# t4: intermediate array[low] address
#
# Output:
# v0: an integer value corresponding to the index of the pivot.

# We have to store 8 values on the stack.
addi $sp, $sp, -36 # setup call-frame # Start partition
sw $ra, ($sp) # save the return addr to get back to main
sw $s0, 4($sp) # save main's s-registers if it is
sw $s1, 8($sp) # using any
sw $s2, 12($sp)
sw $s3, 16($sp)
sw $s4, 20($sp)
sw $s5, 24($sp)
sw $s6, 28($sp)
sw $s7, 32($sp)

# Save the parameter values in the save registers.
move $s0, $a0
move $s1, $a1
move $s2, $a2

# Save left in $s5.
move $s3, $s1

# Save right in $s6.
move $s4, $s2

# Save current pivot value in $s7.
mul $s7, $s1, 4
add $s7, $s7, $s0
lw $s7, ($s7)

while_left_lt_right:
bge $s3, $s4, end_while_left_lt_right

while_array_right_gt_pivot:
# Calculate the right value.
move $s6, $s4
mul $s6, $s6, 4
add $s6, $s6, $s0
lw $s6, ($s6)
ble $s6, $s7, end_while_array_right_gt_pivot
addi $s4, $s4, -1
j while_array_right_gt_pivot

end_while_array_right_gt_pivot:

while_left_lt_right_and_left_element_lte_pivot:
# Check left is less than right index.
sge $t0, $s3, $s4

# Calculate the left value
move $s5, $s3
mul $s5, $s5, 4
add $s5, $s5, $s0
lw $s5, ($s5)

# Check left element is less than equal to pivot.
sgt $t1, $s5, $s7

# Combine the logic for breaking out of the second while loop. If left >= right or array[left] > pivot, their respective conditions will set their registers to a non-zero value. Or-ing the respective bytes and comparing it to zero will yield a non-zero value to break if either is true.

or $t1, $t0, $t1
bne $t1, $zero, end_while_left_lt_right_and_left_element_lte_pivot
addi $s3, $s3, 1
j while_left_lt_right_and_left_element_lte_pivot

end_while_left_lt_right_and_left_element_lte_pivot:

if_left_lt_right:
bge $s3, $s4, end_if_left_lt_right

# Calculate array[left] address.
move $t2, $s3
mul $t2, $t2, 4
add $t2, $t2, $s0
move $a0, $t2

# Calculate array[right] address.
move $t3, $s4 
mul $t3, $t3, 4
add $t3, $t3, $s0
move $a1, $t3
jal swap

end_if_left_lt_right:

j while_left_lt_right

end_while_left_lt_right:

# Calculate array[right]
move $t3, $s4
mul $t3, $t3, 4
add $t3, $t3, $s0
lw $s6, ($t3)

# Calculate the address of array[low]
move $t4, $s1
mul $t4, $t4, 4
add $t4, $t4, $s0

sw $s6, ($t4)
sw $s7, ($t3) 

move $v0, $s4   

lw $ra, ($sp) 
lw $s0, 4($sp) 
lw $s1, 8($sp)
lw $s2, 12($sp)
lw $s3, 16($sp)
lw $s4, 20($sp)
lw $s5, 24($sp)
lw $s6, 28($sp)
lw $s7, 32($sp)
addi $sp, $sp, 36 # setup call-frame

jr $ra


